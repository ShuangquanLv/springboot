# 服务器
server:
  # 开启http服务
  port: 8080

# Eureka客户端配置，与Consul不能共存
eureka:
    client:
        # 该值默认true，为快速响应请求，从Eureka Server拉取服务地址缓存到本地，后期再增量获取
        fetch-registry: true
        # 定期更新客户端缓存的服务清单
        registry-fetch-interval-seconds: 5
        service-url:
            # eureka-server端无安全认证的配置
            #defaultZone: http://127.0.0.1:8089/eureka
            # eureka-server端带安全认证的配置
            defaultZone: http://admin:admin@127.0.0.1:8089/eureka
    instance:
        # 定期向Eureka Server发送一次续约任务（心跳），默认值30s
        lease-renewal-interval-in-seconds: 4
        # 设置服务过期时间，超过这个时间Eureka Server没收到心跳，就会将该实例下线删除，一般是lease-renewal-interval-in-seconds的3倍
        lease-expiration-duration-in-seconds: 12
        health-check-url-path: /actuator/health

spring:
    # client端名称
    application:
        name: spring-boot-application
    # 配置spring-boot-admin server端监控地址
    #boot:
        #admin:
            #client:
                #enabled: true
                #url: http://127.0.0.1:8088
                #username: admin
                #password: admin
    #cloud:
        # Consul-服务注册中心，与Eureka不能共存，暂未成功
        #consul:
            #host: 192.168.3.121
            #port: 8500
            #discovery:
                # 注册到Consul的服务名称，后期客户端根据这个serviceName来调用服务
                #serviceName: ${spring.application.name}
                #port: ${server.port}
                # 是否需要将自身服务注册到Consul，纯消费者设置成false
                #register: true
                #healthCheckPath: /actuator/health
                #healthCheckInterval: 15s            
    # 热部署配置
    devtools:
        restart:
            # 默认已经开启
            enabled: false 
    # 环境选择(test, dev, prod)，通常在application.yml文件中配置多个环境通用参数，并通过active激活指定环境
    profiles:
        active: test
        includes: activemq
    # 数据源    
    datasource:
        name: test
        url: jdbc:oracle:thin:@192.168.3.46:1521:loan
        username: syp2p
        password: syp2p
        # 使用druid数据源
        type: com.alibaba.druid.pool.DruidDataSource
        # 数据源驱动类，oracle.jdbc.driver.OracleDriver或者com.mysql.jdbc.Driver
        driver-class-name: oracle.jdbc.driver.OracleDriver
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat,wall,log4j
        maxActive: 20
        initialSize: 6
        maxWait: 60000
        minIdle: 1
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 'X' FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxOpenPreparedStatements: 20
        logSlowSql: true
    # 模板引擎thymeleaf默认配置项
    thymeleaf:
        cache: true
        check-template-location: true
        content-type: text/html
        enabled: true
        encoding: UTF-8
        mode: HTML5
        prefix: classpath:/templates/
        suffix: .html
    # Redis单机服务配置
    redis:
        # 数据库索引（默认为0）
        database: 0
        # 单机服务器地址
        host: 192.168.3.157
        # 单机服务器端口
        port: 6379
        # 服务器连接密码(默认密码为空)
        password:
        # 连接池配置
        jedis:
            pool:
                # 连接池中的最大空闲连接
                max-idle: 8
                # 连接池中的最小空闲连接
                min-idle: 0
                # 连接池最大连接数（使用负值表示没有限制）
                max-active: 8
                # 连接池最大阻塞等待时间（使用负值表示没有限制）
                max-wait: -1
        # 连接超时时间（毫秒）
        timeout: 0
        # 哨兵模式
        #sentinel:
            # Redis服务器的名称
            #master: 
            # 主机：端口对，用逗号分隔的列表
            #nodes: 
        # 集群模式（一旦开启集群模式，单机模式的部分配置就会被覆盖）
        #cluster:
            # 集群环境下，执行命令时要遵循的最大重定向数目
            #max-redirects: 10
            # 集群环境下，以逗号分隔的redis主机:端口
            #nodes: 192.168.3.64:7000,192.168.3.64:7002,192.168.3.64:7003,192.168.3.65:7004,192.168.3.65:7005,192.168.3.65:7006
    # 上传文件大小限制
    http:
        multipart:
            # 单个文件上限
            maxFileSize: 200Kb
            # 单个请求上限
            maxRequestSize: 10Mb
    # 消息队列RabbitMQ（通过@EnableRabbit注解控制启用和禁用）
    rabbitmq:
        host: 192.168.3.67
        port: 5672
        username: rabbit
        password: rabbit
        # 发送端开启消息发送确认
        publisher-confirms: true
        publisher-returns: true
        template:
            mandatory: true
    # 定时任务quartz
    quartz:
        # 数据存储方式（memory, jdbc）
        job-store-type: jdbc
        # 启动初始化数据库
        jdbc:
            initialize-schema: always
        properties:
            org:
                quartz:
                    scheduler:
                        instanceName: clusteredScheduler
                        instanceId: AUTO
                    jobStore:
                        class: org.quartz.impl.jdbcjobstore.JobStoreTX
                        driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
                        tablePrefix: QRTZ_
                        isClustered: true
                        useProperties: false
                    threadPool:
                        class: org.quartz.simpl.SimpleThreadPool
                        threadCount: 10
                        threadPriority: 5
                        threadsInheritContextClassLoaderOfInitializingThread: true    
    # 配置zipkin+sleuth链路追踪
    zipkin:
        enabled: true
        base-url: http://127.0.0.1:9411
    sleuth:
        web:
            client:
                enabled: true
        sampler:
            # zipkin采集频率，默认0.1表示10%采集率，1.0表示全部采集
            probability: 1.0
    # 配置dubbo服务的生产者
#    dubbo:
#        application:
#            name: provider
#        registry:
#            address: zookeeper://127.0.0.1:2181
#        protocol:
#            name: dubbo
#            port: 20880
#        scan: com.xxx.service.impl
    # 配置dubbo服务的消费者
#    dubbo:
#        application:
#            name: consumer
#        registry:
#            address: zookeeper://127.0.0.1:2181    
#        scan: com.xxx.service.impl
        
# 集成整合mybatis
mybatis:
    mapper-locations: classpath:mybatis/mapper/*.xml
    config-location: classpath:mybatis/mybatis-config.xml
    type-aliases-package: com.xxx.model
  
# 分页插件pagehelper
pagehelper:
    helperDialect: oracle
    reasonable: true
    supportMethodsArguments: true
    params: count=countSql
    
# 日志框架
# spring boot 默认从src/main/resources目录下寻找(Do not use \t(TAB) for indentation)
logging:
    config: classpath:config/logback-spring.xml
    # 输出mybatis的sql日志
    level:
        com:
            xxx:
                dao: debug

# 向springboot-admin暴露actuator的所有端口
management:
    endpoints:
        web:
            exposure:
                include: "*"
    endpoint:
        health:
            show-details: ALWAYS                        